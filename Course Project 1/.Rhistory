library(swirl)
swirl()
sessionInfo()
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts,desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
by_package <- group_by(cran, package)
head(by_package)
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
head(pack_sum)
quantile(pack_sum$countries,probs = 0.99)
quantile(pack_sum$countries,probs = 0.995)
quantile(pack_sum$countries,probs = 0.993)
quantile(pack_sum$countries,probs = 0.992)
result1 <- arrange(top_countries, desc(countries))
top_countries <- filter(pack_sum, countries > 60)
result1 <- arrange(top_countries, desc(countries))
result1
result2 <- arrange(top_countries, desc(countries), ave_bytes)
names(top_countries)
result2 <- arrange(top_countries, desc(countries), avg_bytes)
result2
submit()
submit()
?chain
submit()
cran %>%
select(ip_id,country, package, size) %>%
print
submit()
submit()
names(cran)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate()
?separete
?separate
separate(data=res, col=sex_class, into=c("sex","class"))
submit()
students3
submit()
submit()
submit()
?spread()
?spread
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, c("midterm","final")) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(c("mid","final"),test) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test,-test) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test,name) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test,c(name,class) %>%
print
()
end
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test,c(name,class) )%>%
print
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm %>% spread(stock, price)
stocksm %>% spread(time, price)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test,grade)%>%
print
submit()
extract_numeric("class5")
?mutate
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class=extract_numeric(class))
print
submit()
submit()
students4
student_info <- students4 %>%
select(id, name, sex) %>%
print
submit()
?unique
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here %>%
unique() %>%
print
submit()
gradebook <- students4 %>%
### Your code here %>%
select(id,class,midterm,final)
print
gradebook <- students4 %>%
### Your code here %>%
select(id,class,midterm,final) %>%
print
submit()
### Your code here %>%
select(id,class,midterm,final) %>%
unique() %>%
print
submit()
submit()
gradebook <- students4 %>%
### Your code here %>%
select(id,class,midterm,final) %>%
unique(incomparables = id) %>%
print
gradebook <- students4 %>%
### Your code here %>%
select(id,class,midterm,final) %>%
unique(incomparables = FALSE) %>%
print
gradebook <- students4 %>%
### Your code here %>%
select(id,class,midterm,final) %>%
unique(incomparables = TRUE) %>%
print
gradebook <- students4 %>%
### Your code here %>%
select(id,class,midterm,final) %>%
unique(incomparables != FALSE) %>%
print
submit()
passed
gradebook <- students4 %>%
### Your code here %>%
select(id,class,midterm,final) %>%
select(-id) %>%
unique() %>%
print
passed
info()
play()
student_info
gradebook
gradebook <- students4 %>%
### Your code here %>%
select(name,class,final) %>%
unique() %>%
print
nxt()
failed
mutate(passed,status,status="passed")
mutate(passed,status="passed")
passed <- passed %>%
mutate(passed,status="passed") %>%
print
passed <- passed %>%
mutate(status="passed") %>%
print
passed <- passed %>%
mutate(status="passed")
failed <- failed %>%
mutate(status="failed")
?rbind_list()
?rbind_list
rbind_list(passed,failed)
sat
play()
library(Rcurl)
library("RCurl")
nxt()
play()
?contain
?contains
?select
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(col=part_sex,c("part","sex")) %>%
print
nxt()
submit()
submit()
play()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(c(part,sex)) %>%
mutate(total=sum(count),
prop=count/total
) %>% print
sat
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part,sex) %>%
mutate(total=sum(count),
prop=count/total
) %>%
print
nxt()
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part) %>%
group_by(sex) %>%
mutate(total = sum(count),
prop = count/total
) %>% print
sat %>%
select(-contains("total"))
%>%
gather(part_sex, count, -score_range)
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range)
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex"))
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part) %>%
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part) %>%
group_by(sex)
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part) %>%
group_by(sex) %>%
mutate(total = sum(count),
prop = count/total
)
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
